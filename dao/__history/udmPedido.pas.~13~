unit udmPedido;

interface

uses
  System.SysUtils, System.Classes, FireDAC.Stan.Intf, FireDAC.Stan.Option,
  FireDAC.Stan.Param, FireDAC.Stan.Error, FireDAC.DatS, FireDAC.Phys.Intf,
  FireDAC.DApt.Intf, FireDAC.Stan.Async, FireDAC.DApt, Data.DB,
  FireDAC.Comp.DataSet, FireDAC.Comp.Client, Datasnap.Provider,
  Datasnap.DBClient, uPedidoModel;

type
  TDataModule1 = class(TDataModule)
    fdqPedidos: TFDQuery;
    fdqPedido: TFDQuery;
    fdqInsert: TFDQuery;
    fdqUpdate: TFDQuery;
    cdsPesquisar: TClientDataSet;
    dspPesquisar: TDataSetProvider;
    cdsPesquisarcodpedido: TLargeintField;
    cdsPesquisardtemissao: TDateField;
    cdsPesquisarcodcli: TLargeintField;
    cdsPesquisarvltotal: TBCDField;
    cdsPesquisarnmcliente: TWideStringField;
  private
    { Private declarations }
  public
    { Public declarations }
    function RecuperaIDPedido: integer;
    Procedure Pesquisar;
    procedure CarregarPedido(oPedido: TPedidoModel; iCodPedido: integer);
  end;

var
  DataModule1: TDataModule1;

implementation
uses
  udmConexao;
{%CLASSGROUP 'Vcl.Controls.TControl'}

{$R *.dfm}

{ TDataModule1 }

procedure TDataModule1.CarregarPedido(oPedido: TPedidoModel;
  iCodPedido: integer);
var
  fdqPedido: TFDQuery;
begin
  fdqPedido := TFDQuery.Create(nil);
  try
    with fdqPedido do
    begin
      Connection := dmConexao.fdConexao;
      SQL.Add('select *');
      SQL.Add('from pedido');
      SQL.Add('where codpedido = :pcodpedido');
      ParamByName('pcodpedido').AsInteger := iCodPedido;
      Open;
      with oPedido do
      begin
        codpedido := FieldByName('codpedido').AsInteger;
        dtemissao := FieldByName('dtemissao').AsDateTime;
        codcli    := FieldByName('codcli').AsInteger;
        vltotal   := FieldByName('vltotal').AsFloat;
      end;
    end;
  finally
    FreeAndNil(fdqPedido);
  end;
end;

procedure TDataModule1.Pesquisar;
begin
  if cdsPesquisar.Active then
    cdsPesquisar.Close;
  cdsPesquisar.Open;
  cdsPesquisar.First;
end;

function TDataModule1.RecuperaIDPedido: integer;
var
  fdqCodPedido: TFDQuery;
begin
   fdqCodPedido := TFDQuery.Create(nil);
   try
     with fdqCodPedido do
     begin
       Connection := dmConexao.fdConexao;
       SQL.Add('select currtval(');
       SQL.Add(QuotedStr('pedido_codpedido_seq') + ')');
       SQL.Add(' as CodPedido;');
       Open;
       Result := FieldByName('CodPedido').AsInteger + 1;
     end;
   finally
     FreeAndNil(fdqCodPedido);
   end;
end;

end.
